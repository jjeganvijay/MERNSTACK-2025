import { onSourcesChange } from "./onSourcesChange.js";
export async function watchSources(display, onChange, sources) {
    const message = `watching ${sources.join(", ")} for changes...`;
    display.spinner.start(`Started ${message}`);
    await onSourcesChange(async () => {
        display.spinner.stop("Detected change");
        display.spinner.start("Re-running...");
        // First wait an arbitrary, small amount of time for files to settle
        await new Promise((resolve) => setTimeout(resolve, 50));
        await onChange();
        display.spinner.stop("Re-ran.");
        display.spinner.start(`Resumed ${message}`);
    }, (error) => {
        display.spinner.stop(error instanceof Error ? error.message : String(error));
    }, sources);
}
//# sourceMappingURL=watchSources.js.map