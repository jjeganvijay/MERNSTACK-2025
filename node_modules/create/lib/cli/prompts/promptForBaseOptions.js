import * as prompts from "@clack/prompts";
import { produceBase } from "../../producers/produceBase.js";
import { getSchemaDefaultValue } from "../../utils/getSchemaDefaultValue.js";
import { promptForSchema } from "./promptForSchema.js";
export async function promptForBaseOptions(base, { existing, offline, system }) {
    const { directory } = system;
    const completed = {
        directory,
        ...existing,
        ...(await produceBase(base, {
            ...system,
            offline,
            options: { ...existing, directory },
        })),
    };
    const prompted = {};
    for (const [key, schema] of Object.entries(base.options)) {
        const defaultValue = getSchemaDefaultValue(schema);
        if ((schema.isOptional() && defaultValue === undefined) ||
            completed[key] !== undefined) {
            continue;
        }
        const produced = await promptForSchema(key, schema, defaultValue);
        if (prompts.isCancel(produced)) {
            return { cancelled: true, prompted };
        }
        prompted[key] = produced;
    }
    return {
        cancelled: false,
        completed: {
            ...completed,
            ...prompted,
        },
        prompted,
    };
}
//# sourceMappingURL=promptForBaseOptions.js.map